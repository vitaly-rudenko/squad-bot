import { User } from '../../users/User.js'

export function startCommand({ usersStorage }) {
  return async (context) => {
    const userId = context.state.userId
    const { first_name: name, username } = context.from

    const user = new User({
      id: userId,
      name,
      username: username || null,
      isComplete: true,
    })

    let isNew = false

    try {
      await usersStorage.create(user)
      isNew = true
    } catch (error) {
      if (error.code === 'ALREADY_EXISTS') {
        await usersStorage.update(user)
      } else {
        throw error
      }
    }

    await context.reply(
      isNew
        ? 'üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è'
        : 'üìù –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    )
  }
}

export function registerCommand({ usersStorage }) {
  return async (context) => {
    const userId = context.state.userId
    const { first_name: name, username } = context.from

    const user = new User({
      id: userId,
      name,
      username: username || null,
      isComplete: false,
    })

    let isNew = false

    try {
      await usersStorage.create(user)
      isNew = true
    } catch (error) {
      if (error.code === 'ALREADY_EXISTS') {
        await usersStorage.update(user)
      } else {
        throw error
      }
    }

    await context.reply(
      isNew
        ? 'üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è (–±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)'
        : 'üìù –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    )
  }
}
