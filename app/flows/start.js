export function startCommand({ storage }) {
  return async (context) => {
    if (context.chat.type !== 'private') {
      await context.reply('–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–° –±–æ—Ç–∞.')
      return
    }

    const userId = context.state.userId
    const { first_name: name, username } = context.from

    try {
      await storage.createUser({
        id: userId,
        name,
        username: username || null,
      })

      await context.reply('–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! üéâ')
    } catch (error) {
      await context.reply('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üôå')
    }

    await storage.makeUserComplete(userId)
  }
}

export function registerCommand({ storage }) {
  return async (context) => {
    if (context.chat.type === 'private') {
      await context.reply('–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π /start')
      return
    }

    const userId = context.state.userId
    const { first_name: name, username } = context.from

    try {
      await storage.createUser({
        id: userId,
        name,
        username: username || null,
      })

      await context.reply(`
–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! üéâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É /start –≤ –õ–°.
      `)
    } catch (error) {
      await context.reply(`
–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üôå
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É /start –≤ –õ–°.
`)
    }
  }
}
